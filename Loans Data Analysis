{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6733199c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/macbookair/Desktop/DS360/Case Studies/Python/Basic Statistics - Hypothesis Testing\n"
     ]
    }
   ],
   "source": [
    "%cd '/Users/macbookair/Desktop/DS360/Case Studies/Python/Basic Statistics - Hypothesis Testing'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f59e8069",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "from datetime import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1323d808",
   "metadata": {},
   "outputs": [],
   "source": [
    "loans_data = pd.read_csv(\"LoansData.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d1a4015",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount.Requested</th>\n",
       "      <th>Amount.Funded.By.Investors</th>\n",
       "      <th>Interest.Rate</th>\n",
       "      <th>Loan.Length</th>\n",
       "      <th>Loan.Purpose</th>\n",
       "      <th>Debt.To.Income.Ratio</th>\n",
       "      <th>State</th>\n",
       "      <th>Home.Ownership</th>\n",
       "      <th>Monthly.Income</th>\n",
       "      <th>FICO.Range</th>\n",
       "      <th>Open.CREDIT.Lines</th>\n",
       "      <th>Revolving.CREDIT.Balance</th>\n",
       "      <th>Inquiries.in.the.Last.6.Months</th>\n",
       "      <th>Employment.Length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20000.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>8.90%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>14.90%</td>\n",
       "      <td>SC</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>6541.67</td>\n",
       "      <td>735-739</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14272.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19200.0</td>\n",
       "      <td>19200.0</td>\n",
       "      <td>12.12%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>28.36%</td>\n",
       "      <td>TX</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>4583.33</td>\n",
       "      <td>715-719</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11140.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2 years</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35000.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>21.98%</td>\n",
       "      <td>60 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>23.81%</td>\n",
       "      <td>CA</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>11500.00</td>\n",
       "      <td>690-694</td>\n",
       "      <td>14.0</td>\n",
       "      <td>21977.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2 years</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>9975.0</td>\n",
       "      <td>9.99%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>14.30%</td>\n",
       "      <td>KS</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>3833.33</td>\n",
       "      <td>695-699</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9346.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5 years</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>11.71%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>18.78%</td>\n",
       "      <td>NJ</td>\n",
       "      <td>RENT</td>\n",
       "      <td>3195.00</td>\n",
       "      <td>695-699</td>\n",
       "      <td>11.0</td>\n",
       "      <td>14469.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9 years</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount.Requested  Amount.Funded.By.Investors Interest.Rate Loan.Length  \\\n",
       "0           20000.0                     20000.0         8.90%   36 months   \n",
       "1           19200.0                     19200.0        12.12%   36 months   \n",
       "2           35000.0                     35000.0        21.98%   60 months   \n",
       "3           10000.0                      9975.0         9.99%   36 months   \n",
       "4           12000.0                     12000.0        11.71%   36 months   \n",
       "\n",
       "         Loan.Purpose Debt.To.Income.Ratio State Home.Ownership  \\\n",
       "0  debt_consolidation               14.90%    SC       MORTGAGE   \n",
       "1  debt_consolidation               28.36%    TX       MORTGAGE   \n",
       "2  debt_consolidation               23.81%    CA       MORTGAGE   \n",
       "3  debt_consolidation               14.30%    KS       MORTGAGE   \n",
       "4         credit_card               18.78%    NJ           RENT   \n",
       "\n",
       "   Monthly.Income FICO.Range  Open.CREDIT.Lines  Revolving.CREDIT.Balance  \\\n",
       "0         6541.67    735-739               14.0                   14272.0   \n",
       "1         4583.33    715-719               12.0                   11140.0   \n",
       "2        11500.00    690-694               14.0                   21977.0   \n",
       "3         3833.33    695-699               10.0                    9346.0   \n",
       "4         3195.00    695-699               11.0                   14469.0   \n",
       "\n",
       "   Inquiries.in.the.Last.6.Months Employment.Length  \n",
       "0                             2.0          < 1 year  \n",
       "1                             1.0           2 years  \n",
       "2                             1.0           2 years  \n",
       "3                             0.0           5 years  \n",
       "4                             0.0           9 years  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ec592cf5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2500 entries, 0 to 2499\n",
      "Data columns (total 14 columns):\n",
      " #   Column                          Non-Null Count  Dtype  \n",
      "---  ------                          --------------  -----  \n",
      " 0   Amount.Requested                2499 non-null   float64\n",
      " 1   Amount.Funded.By.Investors      2499 non-null   float64\n",
      " 2   Interest.Rate                   2498 non-null   object \n",
      " 3   Loan.Length                     2500 non-null   object \n",
      " 4   Loan.Purpose                    2500 non-null   object \n",
      " 5   Debt.To.Income.Ratio            2499 non-null   object \n",
      " 6   State                           2500 non-null   object \n",
      " 7   Home.Ownership                  2499 non-null   object \n",
      " 8   Monthly.Income                  2499 non-null   float64\n",
      " 9   FICO.Range                      2498 non-null   object \n",
      " 10  Open.CREDIT.Lines               2497 non-null   float64\n",
      " 11  Revolving.CREDIT.Balance        2497 non-null   float64\n",
      " 12  Inquiries.in.the.Last.6.Months  2497 non-null   float64\n",
      " 13  Employment.Length               2423 non-null   object \n",
      "dtypes: float64(6), object(8)\n",
      "memory usage: 273.6+ KB\n"
     ]
    }
   ],
   "source": [
    "loans_data.info()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "cf9649b4",
   "metadata": {},
   "source": [
    " Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "799f8bce",
   "metadata": {},
   "outputs": [],
   "source": [
    "l = list(loans_data.columns)\n",
    "l1 = list(map(lambda x: str(x).replace(\".\", \"_\"), l))\n",
    "loans_data.columns = l1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b1a85266",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount_Requested</th>\n",
       "      <th>Amount_Funded_By_Investors</th>\n",
       "      <th>Interest_Rate</th>\n",
       "      <th>Loan_Length</th>\n",
       "      <th>Loan_Purpose</th>\n",
       "      <th>Debt_To_Income_Ratio</th>\n",
       "      <th>State</th>\n",
       "      <th>Home_Ownership</th>\n",
       "      <th>Monthly_Income</th>\n",
       "      <th>FICO_Range</th>\n",
       "      <th>Open_CREDIT_Lines</th>\n",
       "      <th>Revolving_CREDIT_Balance</th>\n",
       "      <th>Inquiries_in_the_Last_6_Months</th>\n",
       "      <th>Employment_Length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20000.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>8.90%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>14.90%</td>\n",
       "      <td>SC</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>6541.67</td>\n",
       "      <td>735-739</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14272.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19200.0</td>\n",
       "      <td>19200.0</td>\n",
       "      <td>12.12%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>28.36%</td>\n",
       "      <td>TX</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>4583.33</td>\n",
       "      <td>715-719</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11140.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2 years</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35000.0</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>21.98%</td>\n",
       "      <td>60 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>23.81%</td>\n",
       "      <td>CA</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>11500.00</td>\n",
       "      <td>690-694</td>\n",
       "      <td>14.0</td>\n",
       "      <td>21977.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2 years</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>9975.0</td>\n",
       "      <td>9.99%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>14.30%</td>\n",
       "      <td>KS</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>3833.33</td>\n",
       "      <td>695-699</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9346.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5 years</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>11.71%</td>\n",
       "      <td>36 months</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>18.78%</td>\n",
       "      <td>NJ</td>\n",
       "      <td>RENT</td>\n",
       "      <td>3195.00</td>\n",
       "      <td>695-699</td>\n",
       "      <td>11.0</td>\n",
       "      <td>14469.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9 years</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount_Requested  Amount_Funded_By_Investors Interest_Rate Loan_Length  \\\n",
       "0           20000.0                     20000.0         8.90%   36 months   \n",
       "1           19200.0                     19200.0        12.12%   36 months   \n",
       "2           35000.0                     35000.0        21.98%   60 months   \n",
       "3           10000.0                      9975.0         9.99%   36 months   \n",
       "4           12000.0                     12000.0        11.71%   36 months   \n",
       "\n",
       "         Loan_Purpose Debt_To_Income_Ratio State Home_Ownership  \\\n",
       "0  debt_consolidation               14.90%    SC       MORTGAGE   \n",
       "1  debt_consolidation               28.36%    TX       MORTGAGE   \n",
       "2  debt_consolidation               23.81%    CA       MORTGAGE   \n",
       "3  debt_consolidation               14.30%    KS       MORTGAGE   \n",
       "4         credit_card               18.78%    NJ           RENT   \n",
       "\n",
       "   Monthly_Income FICO_Range  Open_CREDIT_Lines  Revolving_CREDIT_Balance  \\\n",
       "0         6541.67    735-739               14.0                   14272.0   \n",
       "1         4583.33    715-719               12.0                   11140.0   \n",
       "2        11500.00    690-694               14.0                   21977.0   \n",
       "3         3833.33    695-699               10.0                    9346.0   \n",
       "4         3195.00    695-699               11.0                   14469.0   \n",
       "\n",
       "   Inquiries_in_the_Last_6_Months Employment_Length  \n",
       "0                             2.0          < 1 year  \n",
       "1                             1.0           2 years  \n",
       "2                             1.0           2 years  \n",
       "3                             0.0           5 years  \n",
       "4                             0.0           9 years  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "500d0ecb",
   "metadata": {},
   "source": [
    "## Business Problem 1 : Loans Data Analysis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7604bab9",
   "metadata": {},
   "outputs": [],
   "source": [
    "loans_data.Interest_Rate = loans_data.Interest_Rate.apply(\n",
    "    lambda x: float(str(x).replace(\"%\", \"\")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "97ac2d71",
   "metadata": {},
   "outputs": [],
   "source": [
    "loans_data.Loan_Length = loans_data.Loan_Length.apply(\n",
    "    lambda x: float(str(x).replace('months', '')))\n",
    "loans_data.rename(columns={'Loan_Length': 'Loan_Length_in_months'},\n",
    "                  inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "285f8384",
   "metadata": {},
   "outputs": [],
   "source": [
    "loans_data.Debt_To_Income_Ratio = loans_data.Debt_To_Income_Ratio.apply(\n",
    "    lambda x: float(str(x).replace(\"%\", \"\")) / 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "de472700",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Amount_Requested                  0.040016\n",
       "Amount_Funded_By_Investors        0.040016\n",
       "Interest_Rate                     0.080064\n",
       "Loan_Length_in_months             0.000000\n",
       "Loan_Purpose                      0.000000\n",
       "Debt_To_Income_Ratio              0.040016\n",
       "State                             0.000000\n",
       "Home_Ownership                    0.040016\n",
       "Monthly_Income                    0.040016\n",
       "FICO_Range                        0.080064\n",
       "Open_CREDIT_Lines                 0.120144\n",
       "Revolving_CREDIT_Balance          0.120144\n",
       "Inquiries_in_the_Last_6_Months    0.120144\n",
       "Employment_Length                 3.177879\n",
       "dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Percentage of NaN valuesi the data\n",
    "loans_data.isna().sum() * 100 / loans_data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e01fc5a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data.Employment_Length.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "55d06f09",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing NaN Values of Employment_Length with 'unknown'\n",
    "\n",
    "loans_data.Employment_Length.fillna('Unknown', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4a42e97d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking Duplicated Values in data\n",
    "loans_data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cc015715",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping records with missing values since the percentage of the values are very low\n",
    "loans_data.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fad72656",
   "metadata": {},
   "source": [
    "**Q 1 : Intrest rate is varied for different loan amounts (Less intrest charged for high loan\n",
    "amounts)**\n",
    "\n",
    "H0: There is no relatioship beween loan amounts and interest rate\n",
    "\n",
    "HA : There is a linear relationship between amounts and interest rate\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "33619d8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NormaltestResult(statistic=266.22114538427707, pvalue=1.551717995803622e-58)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking normality assumption for Pearson's Correlation test\n",
    "\n",
    "stats.normaltest(loans_data.Amount_Requested)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6df7ac2",
   "metadata": {},
   "source": [
    "p value < 0.05. So amount requested follows normal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f947b0af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NormaltestResult(statistic=68.42220239046432, pvalue=1.3877381612806866e-15)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.normaltest(loans_data.Interest_Rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0672b6ec",
   "metadata": {},
   "source": [
    "p value < 0.05. So interest rate also follows normal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6220dac9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.33080192768204364, 1.2455678861892716e-64)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Both interest rate and amount requested follow normal distribution and hence sastisfy the basic assumptions of Pearson Correlation test.\n",
    "\n",
    "# Checkin Perason's Correlation beween Amount Requested and Interest Rate\n",
    "\n",
    "stats.pearsonr(loans_data.Amount_Requested, loans_data.Interest_Rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34096c7e",
   "metadata": {},
   "source": [
    "p value is less than 0.05 which indcates amount requested and interest rate follows a \n",
    "\n",
    "linear reltionship.\n",
    "\n",
    "person correlation coefficient r = 0.33.\n",
    "\n",
    "This indicates that there is a weak positive correlation between amount requested and interest rate i.e as the amount requested increases,the interest rate also slighly increases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "017db80c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 10))\n",
    "sns.scatterplot(x=loans_data.Amount_Requested, y=loans_data.Interest_Rate)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ce72695",
   "metadata": {},
   "source": [
    "**Q2. Loan length is directly effecting intrest rate.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "047d497e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.4244808110067465, 1.913234435148841e-109)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.pearsonr(loans_data.Loan_Length_in_months, loans_data.Interest_Rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca96d7d2",
   "metadata": {},
   "source": [
    "p value is less than 0.05. So there is a significant but weak linear relationship between \n",
    "loan length in months and interest rate also indicated by Pearson's correlation coefficient\n",
    "r (r = 0.42). So as loan length increses lo interest rate also increases."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea471d76",
   "metadata": {},
   "source": [
    "**Q3. Interest rate varies for different purpose of loans**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "02e0e0fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['debt_consolidation', 'credit_card', 'other', 'moving', 'car',\n",
       "       'vacation', 'home_improvement', 'house', 'major_purchase',\n",
       "       'educational', 'medical', 'wedding', 'small_business',\n",
       "       'renewable_energy'], dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data.Loan_Purpose.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d82570a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        8.90\n",
       "1       12.12\n",
       "2       21.98\n",
       "3        9.99\n",
       "6        7.90\n",
       "        ...  \n",
       "2481     6.62\n",
       "2485    10.75\n",
       "2495    16.77\n",
       "2497    13.99\n",
       "2499    13.79\n",
       "Name: Interest_Rate, Length: 1301, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data[loans_data.Loan_Purpose == 'debt_consolidation'].Interest_Rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "877c7680",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=7.487175499510107, pvalue=1.1346364693350775e-14)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.f_oneway(\n",
    "    loans_data[loans_data.Loan_Purpose == 'debt_consolidation'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'credit_card'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'other'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'moving'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'car'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'vacation'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'home_improvement'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'house'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'major_purchase'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'educational'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'medical'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'wedding'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'small_business'].Interest_Rate,\n",
    "    loans_data[loans_data.Loan_Purpose == 'renewable_energy'].Interest_Rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "592349f2",
   "metadata": {},
   "source": [
    "P value of one way ANOVA is less than 0.05 which means the interest rates for atleast one purpose is significantly  different from others"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51d8752d",
   "metadata": {},
   "source": [
    "\n",
    "**d. There is relationship between FICO scores and Home Ownership. It means that, People\n",
    "with owning home will have high FICO scores.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e6e02336",
   "metadata": {},
   "outputs": [],
   "source": [
    "loans_data['FICO_Range_Mean'] = loans_data.FICO_Range.apply(\n",
    "    lambda x: (int(str(x).split(\"-\")[0])+int(str(x).split(\"-\")[1]))/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c94c7abb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot fico range and home ownership\n",
    "\n",
    "plt.figure(figsize=(10, 10))\n",
    "\n",
    "\n",
    "sns.scatterplot(data=loans_data, y='FICO_Range_Mean',\n",
    "                x='Home_Ownership', legend=False)\n",
    "plt.show()\n",
    "#The association between home ownership category and FICO score is not obvious from the scatter plot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e15db81f",
   "metadata": {},
   "source": [
    "**H0 : There is no association between Home Ownership categories and FICO scores**\n",
    "\n",
    "**H1 : There is a statisticaly significant association between Home Ownership categories and FICO scores**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "81356cfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(281.61252234167836,\n",
       " 8.424183189199365e-17,\n",
       " 111,\n",
       " array([[2.29811169e+00, 1.00441945e-02, 4.01767778e-01, 2.29007634e+00],\n",
       "        [1.37886701e+00, 6.02651667e-03, 2.41060667e-01, 1.37404580e+00],\n",
       "        [4.59622338e-01, 2.00883889e-03, 8.03535556e-02, 4.58015267e-01],\n",
       "        [1.83848935e+00, 8.03535556e-03, 3.21414223e-01, 1.83206107e+00],\n",
       "        [5.69931699e+01, 2.49096022e-01, 9.96384090e+00, 5.67938931e+01],\n",
       "        [6.66452391e+01, 2.91281639e-01, 1.16512656e+01, 6.64122137e+01],\n",
       "        [7.81357975e+01, 3.41502611e-01, 1.36601045e+01, 7.78625954e+01],\n",
       "        [7.62973082e+01, 3.33467256e-01, 1.33386902e+01, 7.60305344e+01],\n",
       "        [7.21607071e+01, 3.15387706e-01, 1.26155082e+01, 7.19083969e+01],\n",
       "        [6.20490157e+01, 2.71193250e-01, 1.08477300e+01, 6.18320611e+01],\n",
       "        [6.38875050e+01, 2.79228606e-01, 1.11691442e+01, 6.36641221e+01],\n",
       "        [7.03222178e+01, 3.07352350e-01, 1.22940940e+01, 7.00763359e+01],\n",
       "        [6.02105263e+01, 2.63157895e-01, 1.05263158e+01, 6.00000000e+01],\n",
       "        [6.15893933e+01, 2.69184411e-01, 1.07673765e+01, 6.13740458e+01],\n",
       "        [5.05584572e+01, 2.20972278e-01, 8.83889112e+00, 5.03816794e+01],\n",
       "        [4.27448775e+01, 1.86822017e-01, 7.47288067e+00, 4.25954198e+01],\n",
       "        [5.14777019e+01, 2.24989956e-01, 8.99959823e+00, 5.12977099e+01],\n",
       "        [4.32044998e+01, 1.88830856e-01, 7.55323423e+00, 4.30534351e+01],\n",
       "        [4.32044998e+01, 1.88830856e-01, 7.55323423e+00, 4.30534351e+01],\n",
       "        [2.98754520e+01, 1.30574528e-01, 5.22298112e+00, 2.97709924e+01],\n",
       "        [2.43599839e+01, 1.06468461e-01, 4.25873845e+00, 2.42748092e+01],\n",
       "        [2.48196063e+01, 1.08477300e-01, 4.33909200e+00, 2.47328244e+01],\n",
       "        [2.80369626e+01, 1.22539172e-01, 4.90156689e+00, 2.79389313e+01],\n",
       "        [2.11426276e+01, 9.24065890e-02, 3.69626356e+00, 2.10687023e+01],\n",
       "        [2.11426276e+01, 9.24065890e-02, 3.69626356e+00, 2.10687023e+01],\n",
       "        [1.65464042e+01, 7.23182001e-02, 2.89272800e+00, 1.64885496e+01],\n",
       "        [7.81357975e+00, 3.41502611e-02, 1.36601045e+00, 7.78625954e+00],\n",
       "        [1.01116914e+01, 4.41944556e-02, 1.76777822e+00, 1.00763359e+01],\n",
       "        [1.28694255e+01, 5.62474890e-02, 2.24989956e+00, 1.28244275e+01],\n",
       "        [8.73282443e+00, 3.81679389e-02, 1.52671756e+00, 8.70229008e+00],\n",
       "        [9.19244677e+00, 4.01767778e-02, 1.60707111e+00, 9.16030534e+00],\n",
       "        [5.97509040e+00, 2.61149056e-02, 1.04459622e+00, 5.95419847e+00],\n",
       "        [5.51546806e+00, 2.41060667e-02, 9.64242668e-01, 5.49618321e+00],\n",
       "        [5.05584572e+00, 2.20972278e-02, 8.83889112e-01, 5.03816794e+00],\n",
       "        [3.67697871e+00, 1.60707111e-02, 6.42828445e-01, 3.66412214e+00],\n",
       "        [2.75773403e+00, 1.20530333e-02, 4.82121334e-01, 2.74809160e+00],\n",
       "        [4.59622338e-01, 2.00883889e-03, 8.03535556e-02, 4.58015267e-01],\n",
       "        [4.59622338e-01, 2.00883889e-03, 8.03535556e-02, 4.58015267e-01]]))"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.chi2_contingency(\n",
    "    pd.crosstab(loans_data.FICO_Range, loans_data.Home_Ownership))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dd7b4f2",
   "metadata": {},
   "source": [
    "**Inference** : *p value is less than 0.05. So null hypothesis is rejected which means  There is a statisticaly significant association between Home Ownership categories and FICO scores*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97134363",
   "metadata": {},
   "source": [
    "**H0 = There is no difference in mean FICO scores of different home ownership categories**\n",
    "\n",
    "**H1 = There is a statstically significant difference between mean FICO scores of different home ownership categories**\n",
    "\n",
    "i.e\n",
    "\n",
    "*H0 :  mean FICO score for mortgage = mean FICO score for own = mean FICO score for rent  = mean FICO score for other*\n",
    "\n",
    "*Ha : mean FICO score for atleast one home ownership category is different from others*\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "bc08d9b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['MORTGAGE', 'RENT', 'OWN', 'OTHER'], dtype=object)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data.Home_Ownership .unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e5708c06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=23.067768208374645, pvalue=1.001016973422469e-14)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.f_oneway(\n",
    "    loans_data[loans_data.Home_Ownership == 'MORTGAGE']['FICO_Range_Mean'],\n",
    "    loans_data[loans_data.Home_Ownership == 'RENT']['FICO_Range_Mean'],\n",
    "    loans_data[loans_data.Home_Ownership == 'OWN']['FICO_Range_Mean'],\n",
    "    loans_data[loans_data.Home_Ownership == 'OTHER']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0680bf0c",
   "metadata": {},
   "source": [
    " **Inference** : *p value less than 0.05 so there is a significant difference between mean of FICO ranges between at least two Home Ownership catergories*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "62482ac4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1363.546867065566"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check assumptions of t test\n",
    "loans_data[loans_data.Home_Ownership == 'MORTGAGE']['FICO_Range_Mean'].var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1bb3aab5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "961.7097176655453"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data[loans_data.Home_Ownership == 'RENT']['FICO_Range_Mean'].var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4724ca66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1586.7814070351765"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data[loans_data.Home_Ownership == 'OWN']['FICO_Range_Mean'].var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a1dc18a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9415887594223022, pvalue=8.797083585959922e-21)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Performing Shapiro-Wilkinson's test for normality on the data\n",
    "stats.shapiro(loans_data[loans_data.Home_Ownership ==\n",
    "              'RENT']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b720cfba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9202942848205566, pvalue=6.118242801278484e-09)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(loans_data[loans_data.Home_Ownership ==\n",
    "              'OWN']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4dfc917b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9459646344184875, pvalue=4.88983036972806e-20)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(loans_data[loans_data.Home_Ownership ==\n",
    "              'MORTGAGE']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "21a46d00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.842151939868927, pvalue=0.17095859348773956)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(loans_data[loans_data.Home_Ownership ==\n",
    "              'OTHER']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bc7d1a7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Considering only three home ownership states i.e 'MORTGAGE','RENT','OWN', performing t tests for each data set of FICO_Range_Mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c1882f9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "713.708916083916"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data[loans_data.Home_Ownership == 'MORTGAGE']['FICO_Range_Mean'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ae285613",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "702.1052631578947"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data[loans_data.Home_Ownership == 'RENT']['FICO_Range_Mean'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "adb913bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "708.55"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data[loans_data.Home_Ownership == 'OWN']['FICO_Range_Mean'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "087384ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "674.0"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans_data[loans_data.Home_Ownership == 'OTHER']['FICO_Range_Mean'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37233b86",
   "metadata": {},
   "source": [
    "Mean Fico Scores for different home ownership categories\n",
    "\n",
    "Mortgage>Own>Rent>Other"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4410363",
   "metadata": {},
   "source": [
    "*H0 :Mean FICO-Score for mortgage catgory = Mean FICO-Score of rent category*\n",
    "\n",
    "*Ha :Mean FICO-Score for mortgage catgory <> Mean FICO-Score of rent category*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "35054aef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=8.13066199546223, pvalue=6.926844050502806e-16)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_ind(loans_data[loans_data.Home_Ownership == 'MORTGAGE']['FICO_Range_Mean'],\n",
    "                loans_data[loans_data.Home_Ownership == 'RENT']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c36ab86f",
   "metadata": {},
   "source": [
    "*Inference : p value less than 0.05 so null hypothesis is rejected*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72087af0",
   "metadata": {},
   "source": [
    "*H0 :Mean FICO-Score for mortgage catgory = Mean FICO-Score of own category*\n",
    "\n",
    "*Ha :Mean FICO-Score for mortgage catgory <> Mean FICO-Score of own category*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2db685a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=1.801122000574274, pvalue=0.07190806467878331)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_ind(loans_data[loans_data.Home_Ownership == 'MORTGAGE']['FICO_Range_Mean'],\n",
    "                loans_data[loans_data.Home_Ownership == 'OWN']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86b062cf",
   "metadata": {},
   "source": [
    "*Inference : p value is greater than 0.05 so null hypothesis cannot be rejected*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99a49504",
   "metadata": {},
   "source": [
    "*H0 :Mean FICO-Score for rent catgory = Mean FICO-Score of own category*\n",
    "\n",
    "*Ha :Mean FICO-Score for rent catgory <> Mean FICO-Score of own category*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ed689d00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-2.5885742255466804, pvalue=0.009741875070081021)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_ind(loans_data[loans_data.Home_Ownership == 'RENT']['FICO_Range_Mean'],\n",
    "                loans_data[loans_data.Home_Ownership == 'OWN']['FICO_Range_Mean'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6514a1e5",
   "metadata": {},
   "source": [
    "*Inference : p value is less than 0.05. So null hypothesis is rejected*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cd9add2",
   "metadata": {},
   "source": [
    "## Business Problem 2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "005a8a4d",
   "metadata": {},
   "source": [
    "**Q. We would like to assess if there is any difference in the average\n",
    "price quotes provided by Mary and Barry**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b633a00",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c0085c77",
   "metadata": {},
   "outputs": [],
   "source": [
    "priceq = pd.read_csv('Price_Quotes.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "7e85defd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order_Number</th>\n",
       "      <th>Barry_Price</th>\n",
       "      <th>Mary_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>126</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>110</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>138</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>142</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>146</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>136</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>94</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>103</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>140</td>\n",
       "      <td>127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>152</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>108</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>97</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Order_Number  Barry_Price  Mary_Price\n",
       "0              1          126         114\n",
       "1              2          110         118\n",
       "2              3          138         114\n",
       "3              4          142         111\n",
       "4              5          146         129\n",
       "5              6          136         119\n",
       "6              7           94          97\n",
       "7              8          103         104\n",
       "8              9          140         127\n",
       "9             10          152         133\n",
       "10            11          108         103\n",
       "11            12           97         108"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "priceq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e719e715",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "124.33333333333333"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "priceq.Barry_Price.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "679a814b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "114.75"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "priceq.Mary_Price.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f087736e",
   "metadata": {},
   "source": [
    "**H0 : Mean Price quotes by Mary = Mean Price quotes by Bary**\n",
    "\n",
    "**Ha : Mean Price quotes by Mary <> Mean Price quotes by Bary**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3a97e9c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_relResult(statistic=2.521376510892349, pvalue=0.02840588045242053)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_rel(priceq.Barry_Price, priceq.Mary_Price)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78cacb5f",
   "metadata": {},
   "source": [
    "**Inference : pvalue<0.05 which means there is significant difference between the mean price quotes given by Mary and Barry indicatig their method could be very different causing high variation between price quotes for same customer**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bbf003b",
   "metadata": {},
   "source": [
    "## Business Problem 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be4259a7",
   "metadata": {},
   "source": [
    "**Determine what effect, if any, the reengineering effort had on the\n",
    "incidence behavioral problems and staff turnover. i.e**\n",
    "\n",
    "**To determine if the re engineering effort changed the critical incidence rate.** \n",
    "\n",
    "**Is there evidence that the critical incidence rate\n",
    "improved?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "5fc71370",
   "metadata": {},
   "outputs": [],
   "source": [
    "newlife = pd.read_csv('Treatment_Facility.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "4e3a2001",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Month</th>\n",
       "      <th>Reengineer</th>\n",
       "      <th>Employee_Turnover</th>\n",
       "      <th>VAR4</th>\n",
       "      <th>VAR5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Prior</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>24.390244</td>\n",
       "      <td>42.682927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Prior</td>\n",
       "      <td>6.0606</td>\n",
       "      <td>19.354839</td>\n",
       "      <td>25.806452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Prior</td>\n",
       "      <td>12.1212</td>\n",
       "      <td>35.087719</td>\n",
       "      <td>146.198830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Prior</td>\n",
       "      <td>3.3333</td>\n",
       "      <td>18.404908</td>\n",
       "      <td>110.429448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Prior</td>\n",
       "      <td>12.9032</td>\n",
       "      <td>17.964072</td>\n",
       "      <td>23.952096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Prior</td>\n",
       "      <td>9.6774</td>\n",
       "      <td>41.176471</td>\n",
       "      <td>47.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Prior</td>\n",
       "      <td>11.7647</td>\n",
       "      <td>13.422819</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>Prior</td>\n",
       "      <td>11.4286</td>\n",
       "      <td>31.250000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Prior</td>\n",
       "      <td>23.0769</td>\n",
       "      <td>17.241379</td>\n",
       "      <td>132.183908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Prior</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>16.574586</td>\n",
       "      <td>16.574586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>Prior</td>\n",
       "      <td>10.0000</td>\n",
       "      <td>5.917160</td>\n",
       "      <td>88.757396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>Prior</td>\n",
       "      <td>26.0870</td>\n",
       "      <td>21.164021</td>\n",
       "      <td>31.746032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>Prior</td>\n",
       "      <td>11.1111</td>\n",
       "      <td>5.076142</td>\n",
       "      <td>10.152284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>Post</td>\n",
       "      <td>26.6667</td>\n",
       "      <td>9.708738</td>\n",
       "      <td>29.126214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>Post</td>\n",
       "      <td>17.9487</td>\n",
       "      <td>4.201681</td>\n",
       "      <td>21.008403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Post</td>\n",
       "      <td>12.8205</td>\n",
       "      <td>13.043478</td>\n",
       "      <td>34.782609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Post</td>\n",
       "      <td>15.7895</td>\n",
       "      <td>9.950249</td>\n",
       "      <td>19.900498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Post</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>9.950249</td>\n",
       "      <td>9.950249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>Post</td>\n",
       "      <td>30.7692</td>\n",
       "      <td>8.510638</td>\n",
       "      <td>25.531915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>Post</td>\n",
       "      <td>26.8293</td>\n",
       "      <td>9.259259</td>\n",
       "      <td>23.148148</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Month Reengineer  Employee_Turnover       VAR4        VAR5\n",
       "0       1      Prior             0.0000  24.390244   42.682927\n",
       "1       2      Prior             6.0606  19.354839   25.806452\n",
       "2       3      Prior            12.1212  35.087719  146.198830\n",
       "3       4      Prior             3.3333  18.404908  110.429448\n",
       "4       5      Prior            12.9032  17.964072   23.952096\n",
       "5       6      Prior             9.6774  41.176471   47.058824\n",
       "6       7      Prior            11.7647  13.422819    0.000000\n",
       "7       8      Prior            11.4286  31.250000   25.000000\n",
       "8       9      Prior            23.0769  17.241379  132.183908\n",
       "9      10      Prior            15.0000  16.574586   16.574586\n",
       "10     11      Prior            10.0000   5.917160   88.757396\n",
       "11     12      Prior            26.0870  21.164021   31.746032\n",
       "12     13      Prior            11.1111   5.076142   10.152284\n",
       "13     14       Post            26.6667   9.708738   29.126214\n",
       "14     15       Post            17.9487   4.201681   21.008403\n",
       "15     16       Post            12.8205  13.043478   34.782609\n",
       "16     17       Post            15.7895   9.950249   19.900498\n",
       "17     18       Post             0.0000   9.950249    9.950249\n",
       "18     19       Post            30.7692   8.510638   25.531915\n",
       "19     20       Post            26.8293   9.259259   23.148148"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newlife"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2a310b16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20 entries, 0 to 19\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Month              20 non-null     int64  \n",
      " 1   Reengineer         20 non-null     object \n",
      " 2   Employee_Turnover  20 non-null     float64\n",
      " 3   VAR4               20 non-null     float64\n",
      " 4   VAR5               20 non-null     float64\n",
      "dtypes: float64(3), int64(1), object(1)\n",
      "memory usage: 928.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "newlife.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8f6fb552",
   "metadata": {},
   "outputs": [],
   "source": [
    "newlife.rename(columns={'VAR4': 'TRFF', 'VAR5': 'CI'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b139e0eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the data into 3 groups for  paired comparatve analysis\n",
    "# 1.Data of 7 months before to re engnieering\n",
    "# 2.Data  of 7 months after re engineering\n",
    "# 3.Data from 7th month to 14th month before re engineering\n",
    "\n",
    "prior_7m_14m = newlife[(newlife.Reengineer == 'Prior') & (newlife.Month <=7)]\n",
    "prior_7m = newlife[(newlife.Reengineer == 'Prior') & (newlife.Month >= 7)]\n",
    "post_7m = newlife[(newlife.Reengineer == 'Post')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "cdc71b0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Month</th>\n",
       "      <th>Reengineer</th>\n",
       "      <th>Employee_Turnover</th>\n",
       "      <th>TRFF</th>\n",
       "      <th>CI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Prior</td>\n",
       "      <td>11.7647</td>\n",
       "      <td>13.422819</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>Prior</td>\n",
       "      <td>11.4286</td>\n",
       "      <td>31.250000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Prior</td>\n",
       "      <td>23.0769</td>\n",
       "      <td>17.241379</td>\n",
       "      <td>132.183908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Prior</td>\n",
       "      <td>15.0000</td>\n",
       "      <td>16.574586</td>\n",
       "      <td>16.574586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>Prior</td>\n",
       "      <td>10.0000</td>\n",
       "      <td>5.917160</td>\n",
       "      <td>88.757396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>Prior</td>\n",
       "      <td>26.0870</td>\n",
       "      <td>21.164021</td>\n",
       "      <td>31.746032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>Prior</td>\n",
       "      <td>11.1111</td>\n",
       "      <td>5.076142</td>\n",
       "      <td>10.152284</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Month Reengineer  Employee_Turnover       TRFF          CI\n",
       "6       7      Prior            11.7647  13.422819    0.000000\n",
       "7       8      Prior            11.4286  31.250000   25.000000\n",
       "8       9      Prior            23.0769  17.241379  132.183908\n",
       "9      10      Prior            15.0000  16.574586   16.574586\n",
       "10     11      Prior            10.0000   5.917160   88.757396\n",
       "11     12      Prior            26.0870  21.164021   31.746032\n",
       "12     13      Prior            11.1111   5.076142   10.152284"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prior_7m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "a83acb12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Month</th>\n",
       "      <th>Reengineer</th>\n",
       "      <th>Employee_Turnover</th>\n",
       "      <th>TRFF</th>\n",
       "      <th>CI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>Post</td>\n",
       "      <td>26.6667</td>\n",
       "      <td>9.708738</td>\n",
       "      <td>29.126214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>Post</td>\n",
       "      <td>17.9487</td>\n",
       "      <td>4.201681</td>\n",
       "      <td>21.008403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Post</td>\n",
       "      <td>12.8205</td>\n",
       "      <td>13.043478</td>\n",
       "      <td>34.782609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Post</td>\n",
       "      <td>15.7895</td>\n",
       "      <td>9.950249</td>\n",
       "      <td>19.900498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Post</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>9.950249</td>\n",
       "      <td>9.950249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>Post</td>\n",
       "      <td>30.7692</td>\n",
       "      <td>8.510638</td>\n",
       "      <td>25.531915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>Post</td>\n",
       "      <td>26.8293</td>\n",
       "      <td>9.259259</td>\n",
       "      <td>23.148148</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Month Reengineer  Employee_Turnover       TRFF         CI\n",
       "13     14       Post            26.6667   9.708738  29.126214\n",
       "14     15       Post            17.9487   4.201681  21.008403\n",
       "15     16       Post            12.8205  13.043478  34.782609\n",
       "16     17       Post            15.7895   9.950249  19.900498\n",
       "17     18       Post             0.0000   9.950249   9.950249\n",
       "18     19       Post            30.7692   8.510638  25.531915\n",
       "19     20       Post            26.8293   9.259259  23.148148"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "post_7m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "962d40bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Month</th>\n",
       "      <th>Reengineer</th>\n",
       "      <th>Employee_Turnover</th>\n",
       "      <th>TRFF</th>\n",
       "      <th>CI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Prior</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>24.390244</td>\n",
       "      <td>42.682927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Prior</td>\n",
       "      <td>6.0606</td>\n",
       "      <td>19.354839</td>\n",
       "      <td>25.806452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Prior</td>\n",
       "      <td>12.1212</td>\n",
       "      <td>35.087719</td>\n",
       "      <td>146.198830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Prior</td>\n",
       "      <td>3.3333</td>\n",
       "      <td>18.404908</td>\n",
       "      <td>110.429448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Prior</td>\n",
       "      <td>12.9032</td>\n",
       "      <td>17.964072</td>\n",
       "      <td>23.952096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Prior</td>\n",
       "      <td>9.6774</td>\n",
       "      <td>41.176471</td>\n",
       "      <td>47.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Prior</td>\n",
       "      <td>11.7647</td>\n",
       "      <td>13.422819</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Month Reengineer  Employee_Turnover       TRFF          CI\n",
       "0      1      Prior             0.0000  24.390244   42.682927\n",
       "1      2      Prior             6.0606  19.354839   25.806452\n",
       "2      3      Prior            12.1212  35.087719  146.198830\n",
       "3      4      Prior             3.3333  18.404908  110.429448\n",
       "4      5      Prior            12.9032  17.964072   23.952096\n",
       "5      6      Prior             9.6774  41.176471   47.058824\n",
       "6      7      Prior            11.7647  13.422819    0.000000"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prior_7m_14m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "479b3024",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/ll/xm2rnn6n4y33_f_1r71q11w40000gn/T/ipykernel_6226/3188839094.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  prior_7m_14m.mean()[1:]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Employee_Turnover     7.980057\n",
       "TRFF                 24.257296\n",
       "CI                   56.589797\n",
       "dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prior_7m_14m.mean()[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "7e45dc25",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/ll/xm2rnn6n4y33_f_1r71q11w40000gn/T/ipykernel_6226/1190313568.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  prior_7m.mean()[1:]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Employee_Turnover    15.495471\n",
       "TRFF                 15.806587\n",
       "CI                   43.487744\n",
       "dtype: float64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prior_7m.mean()[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "aeae0ec5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/ll/xm2rnn6n4y33_f_1r71q11w40000gn/T/ipykernel_6226/2631696112.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  post_7m.mean()[1:]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Employee_Turnover    18.689129\n",
       "TRFF                  9.232042\n",
       "CI                   23.349719\n",
       "dtype: float64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "post_7m.mean()[1:]"
   ]
  },
  {
   "cell_type": "raw",
   "id": "3c6a4ddb",
   "metadata": {},
   "source": [
    "#checking the assumptions of paired t.test\n",
    "\n",
    "    1.The dependent variable (DV) must be continuous which is measured on an interval or          ratio scale\n",
    "    2.The DV should be approximately normally distributed\n",
    "    3.The DV should not contain any significant outliers\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "870e00dd",
   "metadata": {},
   "source": [
    "1.Test for normality assumption : Shapiro-Wilkinson's normality test\n",
    "\n",
    "H0 : The sample is takem from a population that is normally distributed\n",
    "Ha : The sample is takem from a population that is not normally distributed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c234d560",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.80201256275177, pvalue=0.04288336634635925)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(prior_7m.Employee_Turnover)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "a8de7956",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.943507969379425, pvalue=0.6704913973808289)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(prior_7m.TRFF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ec1a3588",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.8308744430541992, pvalue=0.08155961334705353)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(prior_7m.CI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "0a8fd453",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9313627481460571, pvalue=0.5625482201576233)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(post_7m.Employee_Turnover)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "60f91217",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.8776241540908813, pvalue=0.21610914170742035)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(post_7m.TRFF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "6a0fd164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9772419929504395, pvalue=0.9451124668121338)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(post_7m.CI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "842387a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=prior_7m.CI)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "265b5a9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=prior_7m.TRFF)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "caea877b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=prior_7m.Employee_Turnover)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "eea4497d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=post_7m.CI)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "ec248c3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=post_7m.TRFF)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "55d477d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=post_7m.Employee_Turnover)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "912d4384",
   "metadata": {},
   "source": [
    "Inferenece : Based on p values \n",
    "\n",
    "Normally distributed data: All except prior_7m.Employee_Turnover\n",
    "Non parametric data : prior_7m.Employee_Turnover\n",
    "\n",
    "Data with outliers : post_7m_TRFF,post_7m.CI,prior_7m.CI,\n",
    "\n",
    "\n",
    "Based on this Wilcoxon-Signed_Rank test is chosen as the appropriate test to check the change in prior and post data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "32739530",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Impact analysis of re-engineering efforts on staff turn-over, critical incidence rate and % of residents temperorily remove from facility(TRFF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "00e762b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WilcoxonResult(statistic=10.0, pvalue=0.578125)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Crtical Incidence rate\n",
    "# H0 : median  (CI of prior_7m - CI of post_7m) = 0 in the poulation\n",
    "\n",
    "# Ha : median  (CI of prior_7m - CI of post_7m) <> 0 in the poulation\n",
    "\n",
    "\n",
    "\n",
    "stats.wilcoxon(prior_7m.CI, post_7m.CI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "bfdd2a1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Inference : p values is greater than critical value(0.05) so null hypothesis cannot be rejected.This indicates that there isn't a statstically significant effect by re enigineering on critical indence rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "4e80f708",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TRFF\n",
    "# H0 : median of  (CI of prior_7m - CI of post_7m) = 0 in the poulation\n",
    "\n",
    "# Ha : median of (CI of prior_7m - CI of post_7m) <> 0 in the poulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "86f2b06c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WilcoxonResult(statistic=5.0, pvalue=0.15625)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.wilcoxon(prior_7m.TRFF, post_7m.TRFF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "278a11ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Inference : p value>0.05.So null hypothesis cannot be rejected.So re engineering has no statistically signifcant effect on TRFF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "056c1199",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Employee Turnover rate\n",
    "# H0 : median of  of (Employee Turnover prior_7m - Employee Turnover of post_7m) = 0 in the population\n",
    "\n",
    "# Ha :  median of  of (Employee Turnover prior_7m - Employee Turnover of post_7m) <> 0 in the population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "10ce9067",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WilcoxonResult(statistic=9.0, pvalue=0.46875)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.wilcoxon(prior_7m.Employee_Turnover,\n",
    "                post_7m.Employee_Turnover)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "c227b4ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Inference : p values is greater than critical value(0.05) so null hypothesis cannot be rejected.This indicates that there isn't a statstically significant effect by re enigineering on Employee Turn over."
   ]
  },
  {
   "cell_type": "raw",
   "id": "e6b61b84",
   "metadata": {},
   "source": [
    "Conclusion : Re engineerin didn't have any significant impact on the performance of new life facility."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df3cef76",
   "metadata": {},
   "source": [
    "## Business Problem 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "9ec3f21a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Data Available : Priority Assessment Data"
   ]
  },
  {
   "cell_type": "raw",
   "id": "45c9087a",
   "metadata": {},
   "source": [
    "BUSINESS PROBLEM: \n",
    "\n",
    "We will focus on the prioritization system. If the system is working, then\n",
    "high priority jobs, on average, should be completed more quickly than medium priority jobs,\n",
    "and medium priority jobs should be completed more quickly than low priority jobs. Use the\n",
    "data provided to determine whether this is, in fact, occurring"
   ]
  },
  {
   "cell_type": "raw",
   "id": "4baac9dc",
   "metadata": {},
   "source": [
    "H0 : mean no.of days taken to finish a job with High Priority = Medium Priority = Low Priority\n",
    "    \n",
    "H1 : mean no.of days taken to finish a job with High Priority < Medium Priority < Low Priority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "9f36a778",
   "metadata": {},
   "outputs": [],
   "source": [
    "priority = pd.read_csv('Priority_Assessment.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "2f79e582",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Days</th>\n",
       "      <th>Priority</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.3</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.9</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.3</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.7</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.6</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Days Priority\n",
       "0   3.3     High\n",
       "1   7.9   Medium\n",
       "2   0.3     High\n",
       "3   0.7   Medium\n",
       "4   8.6   Medium"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "priority.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "8501fc6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 642 entries, 0 to 641\n",
      "Data columns (total 2 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Days      642 non-null    float64\n",
      " 1   Priority  642 non-null    object \n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 10.2+ KB\n"
     ]
    }
   ],
   "source": [
    "priority.info()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "6af98269",
   "metadata": {},
   "source": [
    "Step 1 : Checking if there is a significant difference mean no.of days taken for different job priorities uisng one way ANOVA\n",
    "\n",
    "Assumptions of one way ANOVA\n",
    "\n",
    "1.Independence of observations\n",
    "2.Normally-distributed response variable\n",
    "3.Homogeneity of variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "f72a0b28",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking assumptions of one way ANOVA\n",
    "#1.Normality assumption\n",
    "#H0 : The sample is takem from a population that is normally distributed\n",
    "#H1 : The sample is takem from a population that is not normally distributed\n",
    "high = priority[priority.Priority=='High']['Days']\n",
    "medium =  priority[priority.Priority=='Medium']['Days']\n",
    "low =  priority[priority.Priority=='Low']['Days']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "840e002f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAANNklEQVR4nO3dX4xc51nH8e/TOKjIW2JbCSvLCSx/rIooFilZQaUgNEswMk2FjURQo1C5UpC5aKRUKlJNbygXCAvhipsKydCIRZSuItpiK70Ay3QULFVQbwhNgimuiAmhlq02f9rxBSjuw8Ueh+161zOzO+OZ5/D9SNbMeeecM8+zR/vbs++cs47MRJJUzzsmXYAkaXMMcEkqygCXpKIMcEkqygCXpKK23co3u/POO3Nubm7o7a5evcr27dtHX9CEtbGvNvYE7eyrjT1BO/taXl7+ZmbetXb8lgb43Nwc586dG3q7brdLp9MZfUET1sa+2tgTtLOvNvYE7ewrIv5jvXGnUCSpKANckooywCWpKANckooywCWpKANckooywCWpKANckooywCWpqFt6J+ZWzB394sTe++Kxhyf23pK0Ec/AJakoA1ySijLAJakoA1ySijLAJakoA1ySijLAJakoA1ySijLAJakoA1ySijLAJakoA1ySijLAJakoA1ySijLAJakoA1ySijLAJakoA1ySijLAJamogQM8Im6LiH+KiGea5V0RcToiLjSPO8dXpiRprWHOwJ8Ezq9aPgqcycy9wJlmWZJ0iwwU4BFxN/Aw8Kerhg8Ci83zReDQSCuTJN1UZGb/lSL+Cvh94F3Ab2Xm+yPijczcsWqd1zPzhmmUiDgCHAGYnZ19YGlpaegie70eL795bejtRmXfnjvGst9er8fMzMxY9j0pbewJ2tlXG3uCdva1sLCwnJnza8e39dswIt4PXMnM5YjoDPvGmXkCOAEwPz+fnc7Qu6Db7XL87NWhtxuVi491xrLfbrfLZr4e06yNPUE7+2pjT9DevtbTN8CBB4Ffjoj3Ae8EfiAi/gK4HBG7M/NSROwGroyzUEnS9+o7B56Zv52Zd2fmHPAB4O8y89eBU8DhZrXDwMmxVSlJusFWrgM/BuyPiAvA/mZZknSLDDKF8rbM7ALd5vm3gIdGX5IkaRDeiSlJRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRRngklSUAS5JRfUN8Ih4Z0T8Y0T8c0S8FBG/24zviojTEXGhedw5/nIlSdcNcgb+38DPZ+ZPAvcDByLivcBR4Exm7gXONMuSpFukb4Dnil6zeHvzL4GDwGIzvggcGkeBkqT1RWb2XyniNmAZ+HHgU5n5sYh4IzN3rFrn9cy8YRolIo4ARwBmZ2cfWFpaGrrIXq/Hy29eG3q7Udm3546x7LfX6zEzMzOWfU9KG3uCdvbVxp6gnX0tLCwsZ+b82vFtg2ycmdeA+yNiB/CFiLhv0DfOzBPACYD5+fnsdDqDbvq2brfL8bNXh95uVC4+1hnLfrvdLpv5ekyzNvYE7eyrjT1Be/taz1BXoWTmG0AXOABcjojdAM3jlVEXJ0na2CBXodzVnHkTEd8P/ALwr8Ap4HCz2mHg5JhqlCStY5AplN3AYjMP/g7g6cx8JiK+DDwdEY8DrwCPjLFOSdIafQM8M78KvGed8W8BD42jKElSf96JKUlFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklFGeCSVJQBLklF9Q3wiLgnIr4UEecj4qWIeLIZ3xURpyPiQvO4c/zlSpKuG+QM/C3go5n5E8B7gQ9HxL3AUeBMZu4FzjTLkqRbpG+AZ+alzHyuef4d4DywBzgILDarLQKHxlSjJGkdkZmDrxwxBzwL3Ae8kpk7Vr32embeMI0SEUeAIwCzs7MPLC0tDV1kr9fj5TevDb3dqOzbc8dY9tvr9ZiZmRnLvieljT1BO/tqY0/Qzr4WFhaWM3N+7fi2QXcQETPA54CPZOa3I2Kg7TLzBHACYH5+PjudzqBv+bZut8vxs1eH3m5ULj7WGct+u90um/l6TLM29gTt7KuNPUF7+1rPQFehRMTtrIT3ZzLz883w5YjY3by+G7gynhIlSesZ5CqUAD4NnM/MT6566RRwuHl+GDg5+vIkSRsZZArlQeCDwAsR8Xwz9nHgGPB0RDwOvAI8MpYKJUnr6hvgmXkW2GjC+6HRliNJGpR3YkpSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUQa4JBVlgEtSUX0DPCKeiogrEfHiqrFdEXE6Ii40jzvHW6Ykaa1BzsD/DDiwZuwocCYz9wJnmmVJ0i3UN8Az81ngtTXDB4HF5vkicGi0ZUmS+onM7L9SxBzwTGbe1yy/kZk7Vr3+emauO40SEUeAIwCzs7MPLC0tDV1kr9fj5TevDb3dqOzbc8dY9tvr9ZiZmRnLvieljT1BO/tqY0/Qzr4WFhaWM3N+7fi2cb9xZp4ATgDMz89np9MZeh/dbpfjZ6+OuLLBXXysM5b9drtdNvP1mGZt7Ana2Vcbe4L29rWezV6FcjkidgM0j1dGV5IkaRCbDfBTwOHm+WHg5GjKkSQNapDLCD8LfBl4d0S8GhGPA8eA/RFxAdjfLEuSbqG+c+CZ+egGLz004lokSUPwTkxJKsoAl6SiDHBJKsoAl6SiDHBJKsoAl6SiDHBJKsoAl6SiDHBJKsoAl6SiDHBJKsoAl6SiDHBJKsoAl6SiDHBJKsoAl6SiDHBJKmrs/yt9G8wd/eJY9vvRfW/xoTHteysuHnt40iVIGoBn4JJUlAEuSUUZ4JJUlAEuSUUZ4JJUlAEuSUUZ4JJUlAEuSUV5I49usJUbl6b15qR+vHlJFXkGLklFGeCSVJQBLklFGeCSVJQfYkr0/+B2nB/O+gGqNsszcEkqygCXpKIMcEkqyjlwacLG9T8+9VP1pqt+prWvcXzW4Rm4JBW1pQCPiAMR8bWI+HpEHB1VUZKk/jYd4BFxG/Ap4JeAe4FHI+LeURUmSbq5rZyB/zTw9cz898z8H2AJODiasiRJ/URmbm7DiF8FDmTmbzTLHwR+JjOfWLPeEeBIs/hu4GubeLs7gW9uqtDp1sa+2tgTtLOvNvYE7ezrhzPzrrWDW7kKJdYZu+GnQWaeAE5s4X2IiHOZOb+VfUyjNvbVxp6gnX21sSdob1/r2coUyqvAPauW7wa+sbVyJEmD2kqAfwXYGxE/EhHfB3wAODWasiRJ/Wx6CiUz34qIJ4C/AW4DnsrMl0ZW2ffa0hTMFGtjX23sCdrZVxt7gvb2dYNNf4gpSZos78SUpKIMcEkqauoDvI2360fExYh4ISKej4hzk65nsyLiqYi4EhEvrhrbFRGnI+JC87hzkjVuxgZ9fSIi/qs5Zs9HxPsmWeOwIuKeiPhSRJyPiJci4slmvOzxuklPpY/VMKZ6Dry5Xf/fgP2sXLb4FeDRzPyXiRa2RRFxEZjPzNI3G0TEzwE94M8z875m7A+A1zLzWPMDd2dmfmySdQ5rg74+AfQy8w8nWdtmRcRuYHdmPhcR7wKWgUPAhyh6vG7S069R+FgNY9rPwL1df4pl5rPAa2uGDwKLzfNFVr6hStmgr9Iy81JmPtc8/w5wHthD4eN1k57+35j2AN8D/Oeq5VdpxwFK4G8jYrn5UwNtMpuZl2DlGwz4wQnXM0pPRMRXmymWMlMNa0XEHPAe4B9oyfFa0xO05Fj1M+0BPtDt+gU9mJk/xcpfcvxw8yu7ptsfAz8G3A9cAo5PtJpNiogZ4HPARzLz25OuZxTW6akVx2oQ0x7grbxdPzO/0TxeAb7AylRRW1xu5iavz1FemXA9I5GZlzPzWmZ+F/gTCh6ziLidlaD7TGZ+vhkufbzW66kNx2pQ0x7grbtdPyK2Nx+4EBHbgV8EXrz5VqWcAg43zw8DJydYy8hcD7nGr1DsmEVEAJ8GzmfmJ1e9VPZ4bdRT9WM1jKm+CgWguQToj/i/2/V/b7IVbU1E/CgrZ92w8qcM/rJqTxHxWaDDyp/vvAz8DvDXwNPADwGvAI9kZqkPBDfoq8PKr+QJXAR+8/rccQUR8bPA3wMvAN9thj/OypxxyeN1k54epfCxGsbUB7gkaX3TPoUiSdqAAS5JRRngklSUAS5JRRngklSUAS5JRRngklTU/wL/rMk5jhkr0wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "low.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "9061e7cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "medium.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "5210d527",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "high.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "aab382b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.37770068645477295, pvalue=7.042255588156208e-32)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(high)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "dd7afb4b",
   "metadata": {},
   "source": [
    "p value<0.05. So data for high priority doesn't follow normal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "7499c904",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.6979362964630127, pvalue=1.8875330465295548e-10)"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(low)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "8b51c3bd",
   "metadata": {},
   "source": [
    "p value<0.05. So data for low priority doesn't follow normal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "80b048f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.5062036514282227, pvalue=7.518808932472392e-26)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.shapiro(medium)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "ef977d10",
   "metadata": {},
   "source": [
    "p value<0.05. So data for medium priority doesn't follow normal distribution"
   ]
  },
  {
   "cell_type": "raw",
   "id": "33b1187c",
   "metadata": {},
   "source": [
    "Since none of the data follow normal distribution the non parametric equivalent of one way ANOVA, Kruskal-Wallis one way ANOVA or one way ANOVA on ranks can be used."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c782af30",
   "metadata": {},
   "source": [
    "**H0 : There is no significant difference among median no. of days to complete the job for the priority groups**\n",
    "\n",
    "**H1 :  Median no. of days to complete the job differs  for atleast one group from other groups**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "7269cfd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KruskalResult(statistic=6.992834934929302, pvalue=0.030305760547285312)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.kruskal(high,low,medium)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "ec7a2132",
   "metadata": {},
   "source": [
    "p value is less than critical value 0.05. So null hypothesis can be rejected.\n",
    "\n",
    "There is a significant difference in the median  no. of days take to finish a priority category from others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "2389055e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking which priority categories take more time to finish the task\n",
    "#Using non parametric equivalent of Student's Independent sample t test i.e Man Whitney test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "9264c6c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "a14d8bfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "medium.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "6e9a32a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.2"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low.median()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d501f9bf",
   "metadata": {},
   "source": [
    "H0 : Median no. of days for high priority = Median no. of days for medium priority\n",
    "H1 : Median no. of days for high priority < Median no. of days for medium priority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "f5967a85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MannwhitneyuResult(statistic=40058.0, pvalue=0.393953948888218)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.mannwhitneyu(high,medium,alternative='less')"
   ]
  },
  {
   "cell_type": "raw",
   "id": "cc81eb45",
   "metadata": {},
   "source": [
    "Inference: p value greater than critical value(0.025, one sided) so null hypotheis cannot be rejected i.e there is no signifcant differnce in no. of days to finish medium and high priority jobs"
   ]
  },
  {
   "cell_type": "raw",
   "id": "0092dcef",
   "metadata": {},
   "source": [
    "H0 : Median no. of days for medium priority = Median no. of days for low priority\n",
    "H1 : Median no. of days for medium priority < Median no. of days for low priority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "5a9f02e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MannwhitneyuResult(statistic=6723.0, pvalue=0.007181971596956215)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.mannwhitneyu(medium,low,alternative='less')"
   ]
  },
  {
   "cell_type": "raw",
   "id": "114f90f9",
   "metadata": {},
   "source": [
    "Inference: p value is less than critical value(0.025, one sided) so null hypotheis can be rejected i.e the no. of days to finish medium priority job is  signifcantly less than  that of low priority jobs"
   ]
  },
  {
   "cell_type": "raw",
   "id": "450f99e2",
   "metadata": {},
   "source": [
    "H0 : Median no. of days for High priority = Median no. of days for low priority\n",
    "H1 : Median no. of days for High priority < Median no. of days for low priority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "929a050e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MannwhitneyuResult(statistic=8773.0, pvalue=0.005447532993802295)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.mannwhitneyu(high,low,alternative='less')"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5571f408",
   "metadata": {},
   "source": [
    "Inference: p value is less than critical value(0.025, one sided) so null hypotheis can be rejected i.e the no. of days to finish high priority job is  signifcantly less than  that of low priority jobs"
   ]
  },
  {
   "cell_type": "raw",
   "id": "54a6de65",
   "metadata": {},
   "source": [
    "Conclusion: Data suggets that even though there is no. signicant difference in no. of days to finish the jobs of high and medium priority,no. of dyas to finish high and medium priority jobs are signifcantly lesser compared to that of low priority jobs. So the prioitisation strategy has worked to an extent."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fa03729",
   "metadata": {},
   "source": [
    "## Business Problem 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "90abb799",
   "metadata": {},
   "outputs": [],
   "source": [
    "#DATA AVAILABLE: Data provided by the Denver Film Society"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "cb461bcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "films = pd.read_csv('Films.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "36791a3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_rowstate_</th>\n",
       "      <th>Movie</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Sinage</th>\n",
       "      <th>Parking</th>\n",
       "      <th>Clean</th>\n",
       "      <th>Overall</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income</th>\n",
       "      <th>Hear_About</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Married</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Single</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Male</td>\n",
       "      <td>Married</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Married</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Married</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   _rowstate_                    Movie  Gender Marital_Status  Sinage  \\\n",
       "0           0  Ferris Buellers Day Off  Female        Married     2.0   \n",
       "1           0  Ferris Buellers Day Off  Female         Single     1.0   \n",
       "2           0  Ferris Buellers Day Off    Male        Married     2.0   \n",
       "3           0  Ferris Buellers Day Off  Female        Married     1.0   \n",
       "4           0  Ferris Buellers Day Off  Female        Married     1.0   \n",
       "\n",
       "   Parking  Clean  Overall  Age  Income Hear_About  \n",
       "0      2.0    2.0      2.0  3.0     1.0          5  \n",
       "1      1.0    1.0      1.0  2.0     1.0          5  \n",
       "2      4.0    3.0      2.0  4.0     1.0          5  \n",
       "3      3.0    2.0      2.0  4.0     1.0          5  \n",
       "4      1.0    1.0      1.0  3.0     3.0          1  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "fe658c0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 330 entries, 0 to 329\n",
      "Data columns (total 11 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   _rowstate_      330 non-null    int64  \n",
      " 1   Movie           330 non-null    object \n",
      " 2   Gender          330 non-null    object \n",
      " 3   Marital_Status  328 non-null    object \n",
      " 4   Sinage          328 non-null    float64\n",
      " 5   Parking         328 non-null    float64\n",
      " 6   Clean           327 non-null    float64\n",
      " 7   Overall         328 non-null    float64\n",
      " 8   Age             328 non-null    float64\n",
      " 9   Income          314 non-null    float64\n",
      " 10  Hear_About      323 non-null    object \n",
      "dtypes: float64(6), int64(1), object(4)\n",
      "memory usage: 28.5+ KB\n"
     ]
    }
   ],
   "source": [
    "films.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "1ee63fdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "9b05d142",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Female', 'Male', '2', '1'], dtype=object)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Gender.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "88eb59b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "films.Gender.replace(to_replace={'1': 'Male', '2': 'Female'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "519cf3a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Married', 'Single', 'Slngle', '1', '2', nan], dtype=object)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Marital_Status.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "f3aab7bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Married', 'Single', nan], dtype=object)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Marital_Status.replace(to_replace={\n",
    "    'Slngle': 'Single',\n",
    "    '1': 'Married',\n",
    "    '2': 'Single'\n",
    "},\n",
    "    inplace=True)\n",
    "films.Marital_Status.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ad10d03",
   "metadata": {},
   "source": [
    "**1.What is the overall level of customer satisfaction?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e64b283e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3.,  2.,  4.,  1., nan])"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Age.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "7d69a100",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['31-60', '13-30', '60+', '1-12', nan], dtype=object)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Age.replace(to_replace={\n",
    "    1.0: '1-12',\n",
    "    2.0: '13-30',\n",
    "    3.0: '31-60',\n",
    "    4.0: '60+'\n",
    "},\n",
    "    inplace=True)\n",
    "films.Age.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "7e8badd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.,  3., nan,  2.])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Income.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "cd54e7c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Less than $50,000', '$100,000+', nan, '$50-$100,000'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Income.replace(to_replace={\n",
    "    1.0: 'Less than $50,000',\n",
    "    2.0: '$50-$100,000',\n",
    "    3.0: '$100,000+'\n",
    "},\n",
    "    inplace=True)\n",
    "films.Income.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "57712112",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['5', '1', '4', '2', '3', '4,5', '2,5', '1,5', nan, '3,4', '5,4',\n",
       "       '3,5'], dtype=object)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Hear_About.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "af879153",
   "metadata": {},
   "outputs": [],
   "source": [
    "films.Hear_About.replace(to_replace={\n",
    "    '1': 'television',\n",
    "    '2': 'newspaper',\n",
    "    '3': 'radio',\n",
    "    '4': 'website',\n",
    "    '5': \"word of mouth\",\n",
    "    '4,5': 'website,word of mouth',\n",
    "    '2,5': 'newspaper,word of mouth',\n",
    "    '1,5': 'television,word of mouth',\n",
    "    '3,4': 'radio,website',\n",
    "    '5,4': 'word of mouth,website',\n",
    "    '3,5': 'radio,word of mouth'\n",
    "},\n",
    "    inplace=True)\n",
    "\n",
    "# can we change this into category varaiable or first into int and then one hot encode?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "9d792eba",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Movie</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ferris Buellers Day Off</th>\n",
       "      <td>1.656934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Old School</th>\n",
       "      <td>1.437500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Willy Wonka</th>\n",
       "      <td>1.622642</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Overall\n",
       "Movie                            \n",
       "Ferris Buellers Day Off  1.656934\n",
       "Old School               1.437500\n",
       "Willy Wonka              1.622642"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Overall level of Customer Satisfaction\n",
    "pd.pivot_table(data=films, index='Movie', values='Overall', aggfunc='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "87dbf39f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6189024390243902"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.Overall.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "401f10ed",
   "metadata": {},
   "source": [
    "**4.What factors are linked to satisfaction?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "5ad63f7c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "_rowstate_         NaN\n",
       "Sinage        0.382881\n",
       "Parking       0.516585\n",
       "Clean         0.349412\n",
       "Overall       1.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.corrwith(films.Overall,method='pearson')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa2d8bd1",
   "metadata": {},
   "source": [
    "*Factors linked to satisfaction are Sinage,Parking facility and cleanliness*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0869beb6",
   "metadata": {},
   "source": [
    "**What is the demographic profile of Film on the Rocks patrons?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "3bd0caa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_rowstate_</th>\n",
       "      <th>Movie</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Sinage</th>\n",
       "      <th>Parking</th>\n",
       "      <th>Clean</th>\n",
       "      <th>Overall</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income</th>\n",
       "      <th>Hear_About</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Married</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>31-60</td>\n",
       "      <td>Less than $50,000</td>\n",
       "      <td>word of mouth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Single</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13-30</td>\n",
       "      <td>Less than $50,000</td>\n",
       "      <td>word of mouth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Male</td>\n",
       "      <td>Married</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>60+</td>\n",
       "      <td>Less than $50,000</td>\n",
       "      <td>word of mouth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Married</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>60+</td>\n",
       "      <td>Less than $50,000</td>\n",
       "      <td>word of mouth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Ferris Buellers Day Off</td>\n",
       "      <td>Female</td>\n",
       "      <td>Married</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31-60</td>\n",
       "      <td>$100,000+</td>\n",
       "      <td>television</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   _rowstate_                    Movie  Gender Marital_Status  Sinage  \\\n",
       "0           0  Ferris Buellers Day Off  Female        Married     2.0   \n",
       "1           0  Ferris Buellers Day Off  Female         Single     1.0   \n",
       "2           0  Ferris Buellers Day Off    Male        Married     2.0   \n",
       "3           0  Ferris Buellers Day Off  Female        Married     1.0   \n",
       "4           0  Ferris Buellers Day Off  Female        Married     1.0   \n",
       "\n",
       "   Parking  Clean  Overall    Age             Income     Hear_About  \n",
       "0      2.0    2.0      2.0  31-60  Less than $50,000  word of mouth  \n",
       "1      1.0    1.0      1.0  13-30  Less than $50,000  word of mouth  \n",
       "2      4.0    3.0      2.0    60+  Less than $50,000  word of mouth  \n",
       "3      3.0    2.0      2.0    60+  Less than $50,000  word of mouth  \n",
       "4      1.0    1.0      1.0  31-60          $100,000+     television  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "films.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "77882c97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1-12</th>\n",
       "      <th>13-30</th>\n",
       "      <th>31-60</th>\n",
       "      <th>60+</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "      <th>Married</th>\n",
       "      <th>Single</th>\n",
       "      <th>$100,000+</th>\n",
       "      <th>$50-$100,000</th>\n",
       "      <th>Less than $50,000</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Movie</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ferris Buellers Day Off</th>\n",
       "      <td>12.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>85</td>\n",
       "      <td>50</td>\n",
       "      <td>40</td>\n",
       "      <td>95</td>\n",
       "      <td>37</td>\n",
       "      <td>38</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Old School</th>\n",
       "      <td>2.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Willy Wonka</th>\n",
       "      <td>12.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>105</td>\n",
       "      <td>51</td>\n",
       "      <td>45</td>\n",
       "      <td>110</td>\n",
       "      <td>39</td>\n",
       "      <td>36</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         1-12  13-30  31-60  60+  Female  Male  Married  \\\n",
       "Movie                                                                     \n",
       "Ferris Buellers Day Off  12.0   68.0   48.0  7.0      85    50       40   \n",
       "Old School                2.0   20.0   10.0  NaN      19    13       11   \n",
       "Willy Wonka              12.0   84.0   56.0  3.0     105    51       45   \n",
       "\n",
       "                         Single  $100,000+  $50-$100,000  Less than $50,000  \n",
       "Movie                                                                        \n",
       "Ferris Buellers Day Off      95         37            38                 53  \n",
       "Old School                   20         11             7                 14  \n",
       "Willy Wonka                 110         39            36                 72  "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gen = pd.pivot_table(data=films,\n",
    "               index='Movie',columns='Gender',values = 'Hear_About',aggfunc='count')\n",
    "income = pd.pivot_table(data=films,\n",
    "               index='Movie',columns='Income',values = 'Hear_About',aggfunc='count')\n",
    "age = pd.pivot_table(data=films,\n",
    "               index='Movie',columns='Age',values = 'Hear_About',aggfunc='count')\n",
    "mar = pd.pivot_table(data=films,\n",
    "               index='Movie',columns='Marital_Status',values = 'Hear_About',aggfunc='count')\n",
    "pd.concat([age,gen,mar,income],axis=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "205c1c4e",
   "metadata": {},
   "source": [
    "**In what media outlet(s) should the film series be advertised?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "48d41240",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hear_About</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>word of mouth</th>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>website</th>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>television</th>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>radio</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>newspaper</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>newspaper,word of mouth</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>radio,website</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>radio,word of mouth</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>television,word of mouth</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>website,word of mouth</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>word of mouth,website</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Count\n",
       "Hear_About                     \n",
       "word of mouth               226\n",
       "website                      41\n",
       "television                   22\n",
       "radio                        14\n",
       "newspaper                    12\n",
       "newspaper,word of mouth       2\n",
       "radio,website                 2\n",
       "radio,word of mouth           1\n",
       "television,word of mouth      1\n",
       "website,word of mouth         1\n",
       "word of mouth,website         1"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.pivot_table(data=films, index='Hear_About', values='Movie',\n",
    "               aggfunc = 'count').sort_values(by='Movie', ascending=False).rename(columns={'Movie':'Count'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "bd8a6024",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Since highest no. of audience turned out by hearing from website and televison, these media should be focused for advertisement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5aff21e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
